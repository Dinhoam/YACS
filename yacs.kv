#:kivy 1.9.0
#:import get_asset_path utils.get_asset_path
#:set COLOR_HIGHLIGHT (0.788235294, 0.643137255, 1)
#:set COLOR_BACKGROUND (0.349019608, 0.082352941, 0.658823529)
#:set COLOR_BACKGROUND_A50 (0.349019608, 0.082352941, 0.658823529, .5)
#:set COLOR_BORDER (0.643137255, 0.160784314, 1)
#:set COLOR_BORDER_A50 (0.643137255, 0.160784314, 1, .5)
#:set COLOR_BORDER_A75 (0.643137255, 0.160784314, 1, .75)
#:set COLOR_HIGHLIGHT_A50 (0.788235294, 0.643137255, 1, .5)
#:set COLOR_HIGHLIGHT_A100 (0.788235294, 0.643137255, 1, 1.0)
#:set COLOR_BACKGROUND_A100 (0.349019608, 0.082352941, 0.658823529, 1.0)
#:set COLOR_BORDER_A100 (0.643137255, 0.160784314, 1, 1.0)

YACSGame:

<YACSGame>:
    gameworld: gameworld
    GameWorld:
        id: gameworld
        gamescreenmanager: gamescreenmanager
        size_of_gameworld: 500*1024
        system_count: 25
        zones: {'general': 10000, 'particles': 10000, 'ships': 50, 'projectiles': 5000}
        model_format_allocations: {'vertex_format_2f4ub': (10000*1024, 10000*1024), 'vertex_format_4f': (10000*1024, 10000*1024), 'vertex_format_9f4ub': (10000*1024, 10000*1024)}
        PositionSystem2D:
            system_id: 'position'
            gameworld: gameworld
            zones: ['general', 'particles', 'ships', 'projectiles']
        RotateSystem2D:
            gameworld: gameworld
            zones: ['general', 'particles', 'ships', 'projectiles']
        ScaleSystem2D:
            gameworld: gameworld
            zones: ['general', 'particles', 'ships']
        ColorSystem:
            gameworld: gameworld
            zones: ['general', 'particles', 'ships']
        GameView:
            gameworld: gameworld
            id: camera_stars1
            system_id: 'camera_stars1'
            camera_pos: (camera_top.camera_pos[0])*.4, (camera_top.camera_pos[1])*.4
            do_scroll_lock: False
            size: root.size
        GameView:
            gameworld: gameworld
            id: camera_stars2
            system_id: 'camera_stars2'
            do_scroll_lock: False
            camera_pos: (camera_top.camera_pos[0])*.5, (camera_top.camera_pos[1])*.5
            size: root.size
        GameView:
            gameworld: gameworld
            id: camera_sun1
            system_id: 'camera_sun1'
            camera_pos: (camera_top.camera_pos[0])*.66, (camera_top.camera_pos[1])*.66
            do_scroll_lock: False
            size: root.size
        GameView:
            gameworld: gameworld
            id: camera_sun2
            system_id: 'camera_sun2'
            camera_pos: (camera_top.camera_pos[0])*.75, (camera_top.camera_pos[1])*.75
            do_scroll_lock: False
            size: root.size
        GameMap:
            system_id: 'map'
            id: map
            map_size: (2500., 2500.)
        GameView:
            gameworld: gameworld
            id: camera_planet1
            system_id: 'camera_planet1'
            camera_pos: (camera_top.camera_pos[0])*.83, (camera_top.camera_pos[1])*.83
            do_scroll_lock: False
            size: root.size
        GameView:
            gameworld: gameworld
            do_scroll: True
            do_scroll_lock: True
            id: camera_top
            camera_pos: (-500., -500.)
            system_id: 'camera_planet2'
            size: root.size
            currentmap: map
            render_system_order: ['rotate_renderer', 'particle_renderer', 'planet2']
        ColorPolyRenderer:
            gameworld: gameworld
            shader_source: get_asset_path('assets', 'shaders', 'poscolorshader.glsl')
            system_id: 'back_stars'
            zones: ['general']
            static_rendering: True
            max_batches: 5
            gameview: 'camera_stars1'
            size_of_batches: 512
            force_update: True
            system_names: ['back_stars', 'position']
            frame_count: 1
        ColorPolyRenderer:
            gameworld: gameworld
            shader_source: get_asset_path('assets', 'shaders', 'poscolorshader.glsl')
            system_id: 'mid_stars'
            zones: ['general']
            static_rendering: True
            max_batches: 5
            force_update: True
            gameview: 'camera_stars2'
            size_of_batches: 512
            system_names: ['mid_stars', 'position']
            frame_count: 1
        ColorPolyRenderer:
            gameworld: gameworld
            shader_source: get_asset_path('assets', 'shaders', 'poscolorshader.glsl')
            system_id: 'sun1'
            zones: ['general']
            static_rendering: True
            force_update: True
            max_batches: 10
            gameview: 'camera_sun1'
            size_of_batches: 768
            system_names: ['sun1', 'position']
            frame_count: 1
        ColorPolyRenderer:
            gameworld: gameworld
            shader_source: get_asset_path('assets', 'shaders', 'poscolorshader.glsl')
            system_id: 'sun2'
            zones: ['general']
            static_rendering: True
            force_update: True
            max_batches: 10
            gameview: 'camera_sun2'
            size_of_batches: 768
            system_names: ['sun2', 'position']
            frame_count: 1
        ColorPolyRenderer:
            gameworld: gameworld
            shader_source: get_asset_path('assets', 'shaders', 'poscolorshader.glsl')
            zones: ['general']
            system_id: 'planet1'
            gameview: 'camera_planet1'
            force_update: True
            static_rendering: True
            max_batches: 10
            size_of_batches: 768
            system_names: ['planet1', 'position']
            frame_count: 1
        ColorPolyRenderer:
            gameworld: gameworld
            shader_source: get_asset_path('assets', 'shaders', 'poscolorshader.glsl')
            system_id: 'planet2'
            zones: ['general']
            force_update: True
            static_rendering: True
            max_batches: 10
            gameview: 'camera_planet2'
            size_of_batches: 768
            system_names: ['planet2', 'position']
            frame_count: 1
        ParticleSystem:
            id: particles
            gameworld: gameworld
            zones: ['particles']
            particle_zone: 'particles'
        ParticleRenderer:
            gameworld: gameworld
            zones: ['particles']
            shader_source: get_asset_path('assets', 'shaders', 'positionrotatecolorscale.glsl')
            frame_count: 3
            max_batches: 20
            size_of_batches: 1024
            gameview: 'camera_planet2'
            updateable: True
        EmitterSystem:
            id: emitter
            gameworld: gameworld
            zones: ['ships', 'projectiles', 'general']
            particle_system: particles.__self__
        CymunkPhysics:
            gameworld: root.gameworld
            zones: ['ships', 'projectiles', 'general']
            updateable: True
            id: physics
        SteeringSystem:
            zones: ['ships']
            gameworld: root.gameworld
            updateable: True
        SteeringAISystem:
            zones: ['ships']
            gameworld: root.gameworld
            physics_system: physics.__self__
        WeaponAISystem:
            zones: ['ships']
            gameworld: root.gameworld
            physics_system: physics.__self__
        RotateRenderer:
            zones: ['ships', 'projectiles', 'general']
            gameworld: gameworld
            max_batches: 10
            frame_count: 3
            updateable: True
            gameview: 'camera_planet2'
            shader_source: get_asset_path('assets', 'shaders', 'positionrotateshader.glsl')
        ShipSystem:
            zones: ['ships']
            do_components: True
            system_id: 'ship_system'
            id: ship_system
            explosion_system: explosions
            gameworld: gameworld
            camera_system: camera_top
            player_system: player
        PlayerSystem:
            do_components: False
            system_id: 'player'
            gameworld: gameworld
            camera_system: camera_top
            physics_system: physics
            id: player
            sound_manager: gameworld.sound_manager
            weapon_system: weapons
        ProjectileSystem:
            gameworld: gameworld
            id: projectiles
            zones: ['projectiles']
            emitter_system: emitter
            physics_system: physics
            combat_stats_system: combat_stats
            player_system: player
        ProjectileWeaponSystem:
            zones: ['ships']
            id: weapons
            gameworld: gameworld
            player_entity: player.current_entity
            projectile_system: projectiles.__self__
        CombatStatsSystem:
            id: combat_stats
            gameworld: gameworld
            zones: ['ships', 'projectiles', 'general']
        LifespanSystem:
            id: lifespan
            gameworld: gameworld
            zones: ['projectiles', 'general']
        AsteroidSystem:
            id: asteroids
            gameworld: gameworld
            explosion_system: explosions
            player_system: player
        ExplosionSystem:
            id: explosions
            gameworld: gameworld
            zones: ['general']

    GameScreenManager: 
        id: gamescreenmanager
        size: root.size
        pos: root.pos
        gameworld: gameworld
        MainScreen:
            current_health: player.current_health
            total_health: player.total_health
            current_ammo: player.current_ammo
            total_ammo: player.total_ammo
            weapon_name: player.current_weapon_name

<MainScreen>:
    name: 'main'
    FloatLayout:
        Button: 
            text: 'Gen'
            pos_hint: {'x': .9, 'y': .05}
            size_hint: (.1, .1)
            on_release: app.root.reload()
        Button:
            text: 'Clear'
            pos_hint: {'x': .9, 'y': .175}
            size_hint: (.1, .1)
            on_release: app.root.clear()
        DebugPanel:
            size_hint: (.2, .1)
            pos_hint: {'x': .225, 'y': .025}
        HealthBar:
            size_hint: (.25, .1)
            pos_hint: {'x': .025, 'y': .875}
            current_health: root.current_health
            total_health: root.total_health
        AmmoBar:
            size_hint: (.25, .05)
            pos_hint: {'x': .025, 'y': .825}
            current_ammo: root.current_ammo
            total_ammo: root.total_ammo
            weapon_name: root.weapon_name


<DebugPanel>:
    Label:
        pos: root.pos
        size: root.size
        font_size: root.size[1]*.5
        halign: 'center'
        valign: 'middle'
        color: (1,1,1,1)
        text: 'FPS: ' + root.fps if root.fps != None else 'FPS:'


<HealthBar>:
    orientation: 'vertical'
    padding: 10
    Widget:
        size_hint: (1.0, 1.0)
        canvas:
            Color:
                rgba: COLOR_BACKGROUND_A50
            Rectangle: 
                pos: self.pos
                size: self.size
            Color:
                rgba: COLOR_HIGHLIGHT_A50
            Rectangle:
                pos: self.pos
                size: ((root.health_percentage)*self.size[0], self.size[1])
            Color:
                rgba: COLOR_BORDER_A50
            Line:
                width: 2.
                rectangle: (self.pos[0], self.pos[1], self.size[0], self.size[1])
                joint: 'bevel'

<AmmoBar>:
    orientation: 'horizontal'
    padding: 10
    Label:
        text: root.weapon_name
        size_hint: (.4, 1.0)
    Label:
        text: str(root.current_ammo)
        size_hint: (.3, 1.0)
    Label:
        text: str(root.total_ammo)
        size_hint: (.3, 1.0)

